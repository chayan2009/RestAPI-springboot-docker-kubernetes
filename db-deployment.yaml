# Define a 'Persistent Volume Claim' (PVC) for MySQL Storage, dynamically provisioned by the cluster
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pv-claim # Name of the PVC for identifying the storage data
  labels:
    app: mysql
    tier: database
spec:
  accessModes:
    - ReadWriteOnce   # Specifies the mode of the claim
  resources:
    requests:
      storage: 1Gi    # Space requested for the claim

---
# Configure 'Deployment' of MySQL server
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
  labels:
    app: mysql
    tier: database
spec:
  selector:
    matchLabels:
      app: mysql
      tier: database
  strategy:
    type: Recreate
  template:
    metadata:
      labels: # Must match 'Service' and 'Deployment' selectors
        app: mysql
        tier: database
    spec:
      containers:
        - image: mysql:8.0 # MySQL version
          name: mysql
          env:
            - name: MYSQL_ROOT_PASSWORD
              value: root
            - name: MYSQL_DATABASE # Name of the database to be created
              value: dbs
          ports:
            - containerPort: 3306
              name: mysql
          volumeMounts: # Mounting volume obtained from the PVC
            - name: mysql-persistent-storage
              mountPath: /var/lib/mysql # Path inside the container for MySQL data
      volumes:
        - name: mysql-persistent-storage
          persistentVolumeClaim:
            claimName: mysql-pv-claim # Reference to the PVC

---
# Define a 'Service' to expose MySQL to other services
apiVersion: v1
kind: Service
metadata:
  name: mysql # Service name (used for DNS within the cluster)
  labels:
    app: mysql
    tier: database
spec:
  ports:
    - port: 3306
      targetPort: 3306
  selector: # MySQL Pod should contain the same labels
    app: mysql
    tier: database
  clusterIP: None # Enables DNS-based discovery within the cluster
